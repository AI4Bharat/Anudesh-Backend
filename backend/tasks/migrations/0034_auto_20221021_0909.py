# Generated by Django 3.2.14 on 2022-10-21 09:09

from django.db import migrations, models
from django.db.models import Q
from tasks.models import Annotation
from tasks.views import SentenceOperationViewSet


def minor_major_accepted_task(annotation_objs):
    sentence_operation = SentenceOperationViewSet()

    minor, major = [], []
    for annot in annotation_objs:
        try:
            annotator_obj = Annotation.objects.get(
                task_id=annot.task_id, parent_annotation_id=None
            )
            reviewer_obj = Annotation.objects.filter(
                task_id=annot.task_id, parent_annotation_id__isnull=False
            )

            str1 = annotator_obj.result[0]["value"]["text"]
            str2 = reviewer_obj[0].result[0]["value"]["text"]
            data = {"sentence1": str1[0], "sentence2": str2[0]}

            char_level_distance = (
                sentence_operation.calculate_normalized_character_level_edit_distance(
                    data
                )
            )
            char_score = char_level_distance.data[
                "normalized_character_level_edit_distance"
            ]
            if char_score > 0.3:
                major.append(annot)
            else:
                minor.append(annot)
        except:
            pass

    return minor, major


def change_existing_task_annotation_status_in_db(apps, schema_editor):
    tasks = apps.get_model("tasks", "Task")
    annotations = apps.get_model("tasks", "Annotation")
    db_alias = schema_editor.connection.alias
    taskobj = tasks.objects.using(db_alias).all()
    annotator_annotobj = annotations.using(db_alias).filter(parent_annotation_id=None)
    reviewer_annotobj = annotations.using(db_alias).filter(
        parent_annotation_id__isnull=False
    )
    # annotator annotation objects status update
    annot1 = annotator_annotobj.filter(
        Q(task__task_status="unlabeled") | Q(task__task_status="freezed")
    )
    for ann1 in annot1:
        ann1.annotation_status = "unlabeled"
        ann1.save()

    annot2 = annotator_annotobj.filter(
        Q(task__task_status="labeled")
        | Q(task__task_status="accepted")
        | Q(task__task_status="accepted_with_changes")
        | Q(task__task_status="to_be_revised")
    )

    for ann2 in annot2:
        ann2.annotation_status = "labeled"
        ann2.save()

    annot3 = annotator_annotobj.filter(task__task_status="skipped")

    for ann3 in annot3:
        ann3.annotation_status = "skipped"
        ann3.save()

    annot4 = annotator_annotobj.filter(task__task_status="draft")

    for ann4 in annot4:
        ann4.annotation_status = "draft"
        ann4.save()

    # reviewer annotation objects status update
    annot5 = reviewer_annotobj.filter(
        Q(task__task_status="labeled")
        | Q(task__task_status="unlabeled")
        | Q(task__task_status="freezed")
    )

    for ann5 in annot5:
        ann5.annotation_status = "unreviewed"
        ann5.save()

    annot6 = reviewer_annotobj.filter(task__task_status="accepted")

    for ann6 in annot6:
        ann6.annotation_status = "accepted"
        ann6.save()

    annot7 = reviewer_annotobj.filter(task__task_status="skipped")

    for ann7 in annot7:
        ann7.annotation_status = "skipped"
        ann7.save()

    annot8 = reviewer_annotobj.filter(task__task_status="draft")

    for ann8 in annot8:
        ann8.annotation_status = "draft"
        ann8.save()

    annot9 = reviewer_annotobj.filter(task__task_status="to_be_revised")

    for ann9 in annot9:
        ann9.annotation_status = "to_be_revised"
        ann9.save()

    annot10 = reviewer_annotobj.filter(task__task_status="accepted_with_changes")

    minor, major = minor_major_accepted_task(annot10)

    for min_ in minor:
        min_.annotation_status = "accepted_with_minor_changes"
        min_.save()

    for maj_ in major:
        maj_.annotation_status = "accepted_with_major_changes"
        maj_.save()

    minor.extend(major)
    annot10_list = list(annot10)

    error_annot = list(set(annot10_list) - set(minor))

    for err_ann in error_annot:
        err_ann.annotation_status = "accepted_with_major_changes"
        err_ann.save()

    # tasks objects status update

    task1 = taskobj.filter(
        Q(task_status="unlabeled") | Q(task_status="skipped") | Q(task_status="draft")
    )

    for tas1 in task1:
        tas1.task_status = "incomplete"
        tas1.save()

    task2 = taskobj.filter(task_status="labeled")
    for tas2 in task2:
        tas2.task_status = "annotated"
        tas2.save()

    task3 = taskobj.filter(
        Q(task_status="accepted")
        | Q(task_status="accepted_with_changes")
        | Q(task_status="to_be_revised")
    )
    for tas3 in task3:
        if tas3.enable_task_reviews:
            tas3.task_status = "reviewed"
            tas3.save()
        else:
            tas3.task_status = "annotated"
            tas3.save()

    task4 = taskobj.filter(task_status="freezed")
    for tas4 in task4:
        tas4.task_status = "freezed"
        tas4.save()

    task5 = taskobj.filter(task_status="exported")
    for tas5 in task5:
        tas5.task_status = "exported"
        tas5.save()


class Migration(migrations.Migration):

    dependencies = [
        ("tasks", "0033_delete_tasklock"),
    ]

    operations = [
        migrations.AddField(
            model_name="annotation",
            name="annotation_status",
            field=models.CharField(
                choices=[
                    ("unlabeled", "unlabeled"),
                    ("labeled", "labeled"),
                    ("skipped", "skipped"),
                    ("draft", "draft"),
                    ("unreviewed", "unreviewed"),
                    ("accepted", "accepted"),
                    ("accepted_with_minor_changes", "accepted_with_minor_changes"),
                    ("accepted_with_major_changes", "accepted_with_major_changes"),
                    ("to_be_revised", "to_be_revised"),
                ],
                default="unlabeled",
                max_length=100,
                verbose_name="annotation_status",
            ),
        ),
        migrations.RunPython(change_existing_task_annotation_status_in_db),
        migrations.AlterField(
            model_name="task",
            name="task_status",
            field=models.CharField(
                choices=[
                    ("incomplete", "incomplete"),
                    ("annotated", "annotated"),
                    ("reviewed", "reviewed"),
                    ("exported", "exported"),
                    ("freezed", "freezed"),
                ],
                default="incomplete",
                max_length=100,
                verbose_name="task_status",
            ),
        ),
    ]
