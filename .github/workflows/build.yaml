name: Build Docker Container & Push to AC Registry

on:
  workflow_call:
  workflow_dispatch:
    branches: [k8s]

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: shoonyaregistry
  CLUSTER_NAME: shoonya-cluster
  CLUSTER_RESOURCE_GROUP: shoonya
  NAMESPACE: shoonya
  SECRET: shoonya-secrets
  APP_NAME: shoonya-backend
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    
    # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container Registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
      working-directory: ./backend/
    
    - name: Update Deployment Secrets
      run: |
        cat << EOF >> backend/.env.prod
        DEBUG=${{ secrets.DJANGO_DEBUG }}
        DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
        DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
        DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
        DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        ENV_ALLOWED_HOST=*
        POSTGRES_DB=${{ secrets.POSTGRES_DB }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_USER=${{ secrets.POSTGRES_USER }}
        POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
        DB_IGNORE_SSL=${{ secrets.DB_IGNORE_SSL }}
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PORT=${{ secrets.REDIS_PORT }}
        SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}
        EMAIL_HOST=${{ secrets.EMAIL_HOST }}
        EMAIL_PORT=${{ secrets.EMAIL_PORT }}
        DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
        EOF
        kubectl delete secret ${{ env.SECRET }} --namespace ${{ env.NAMESPACE }}
        kubectl create secret generic ${{ env.secret }} --from-env-file=backend/.env.prod --namespace ${{ env.NAMESPACE }}
    
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    # - uses: azure/aks-set-context@v1
    #   with:
    #     creds: '${{ secrets.AZURE_CREDENTIALS }}'
    #     cluster-name: ${{ env.CLUSTER_NAME }}
    #     resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # # Create namespace if doesn't exist
    # - run: |
    #     kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
    
    # # Create image pull secret for ACR
    # - uses: azure/k8s-create-secret@v1
    #   with:
    #     container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
    #     container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
    #     container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
    #     secret-name: ${{ env.SECRET }}
    #     namespace: ${{ env.NAMESPACE }}
    #     arguments: --force true
    
    # # Deploy app to AKS
    # - uses: azure/k8s-deploy@v1
    #   with:
    #     manifests: |
    #       ${{ github.workspace }}/k8s/deployment.yaml
    #       ${{ github.workspace }}/k8s/web-service.yaml
    #     images: |
    #       ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
    #     imagepullsecrets: |
    #       ${{ env.SECRET }}
    #     namespace: ${{ env.NAMESPACE }}